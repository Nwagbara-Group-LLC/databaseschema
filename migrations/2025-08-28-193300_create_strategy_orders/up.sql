-- Create comprehensive strategy order persistence tables
-- This supports tracking all orders generated by strategies with full audit trail

-- Strategy order status enum
CREATE TYPE order_status AS ENUM (
    'pending',
    'submitted',
    'partially_filled',
    'filled',
    'cancelled',
    'rejected',
    'expired',
    'failed'
);

-- Order side enum
CREATE TYPE order_side AS ENUM (
    'buy',
    'sell'
);

-- Order type enum  
CREATE TYPE order_type AS ENUM (
    'market',
    'limit',
    'stop_limit',
    'iceberg',
    'twap',
    'vwap',
    'implementation'
);

-- Time in force enum
CREATE TYPE time_in_force AS ENUM (
    'ioc',  -- Immediate or Cancel
    'fok',  -- Fill or Kill
    'gtc',  -- Good Till Cancel
    'day',  -- Good for Day
    'gtd'   -- Good Till Date
);

-- Execution urgency enum
CREATE TYPE execution_urgency AS ENUM (
    'low',
    'medium', 
    'high',
    'critical'
);

-- Main strategy orders table - tracks all orders created by strategies
CREATE TABLE strategy_orders (
    -- Primary identifiers
    id UUID DEFAULT uuid_generate_v4(),
    signal_id BIGINT NOT NULL,                      -- Links to the signal that generated this order
    strategy_instance_id UUID,                      -- Links to strategy instance (nullable for now)
    parent_order_id UUID,                           -- For child orders in routing (no FK for now)
    
    -- Order identification
    exchange_order_id VARCHAR(255),                 -- Exchange-specific order ID when submitted
    unique_id VARCHAR(255) NOT NULL,                -- Internal unique identifier
    
    -- Trading details
    symbol VARCHAR(20) NOT NULL,
    exchange VARCHAR(50) NOT NULL, 
    side order_side NOT NULL,
    order_type order_type NOT NULL,
    time_in_force time_in_force DEFAULT 'gtc',
    
    -- Quantities and pricing
    original_quantity NUMERIC(20, 8) NOT NULL,      -- Original order quantity
    remaining_quantity NUMERIC(20, 8) NOT NULL,     -- Remaining unfilled quantity
    filled_quantity NUMERIC(20, 8) DEFAULT 0,       -- Total filled quantity
    
    price NUMERIC(20, 8),                           -- Order price (NULL for market orders)
    stop_price NUMERIC(20, 8),                      -- Stop price for stop orders
    avg_fill_price NUMERIC(20, 8),                  -- Average fill price
    
    -- Execution details
    status order_status NOT NULL DEFAULT 'pending',
    urgency execution_urgency DEFAULT 'medium',
    fees_paid NUMERIC(20, 8) DEFAULT 0,
    
    -- Strategy context
    strategy_name VARCHAR(255) NOT NULL,            -- Strategy that created this order
    strategy_version VARCHAR(50) DEFAULT '1.0.0',
    signal_confidence NUMERIC(3, 2),                -- Confidence level from signal (0.0-1.0)
    signal_flags INTEGER DEFAULT 0,                 -- Bit flags from signal
    
    -- Risk and compliance
    risk_score NUMERIC(5, 4),                       -- Risk assessment score
    compliance_checked BOOLEAN DEFAULT false,       -- Whether compliance checks passed
    risk_limits_checked BOOLEAN DEFAULT false,      -- Whether risk limits were validated
    
    -- Routing information
    routing_algorithm VARCHAR(50),                   -- Algorithm used for routing
    execution_venue VARCHAR(50),                     -- Primary execution venue
    child_order_count INTEGER DEFAULT 0,            -- Number of child orders
    
    -- Performance tracking
    slippage_bps INTEGER,                            -- Slippage in basis points
    implementation_shortfall_bps INTEGER,           -- Implementation shortfall
    market_impact_bps INTEGER,                      -- Market impact measurement
    
    -- Metadata and context
    order_metadata JSONB,                           -- Additional order context
    execution_context JSONB,                        -- Market context at execution
    tags TEXT[],                                     -- Tags for categorization
    
    -- Rejection/failure details
    rejection_reason TEXT,
    error_message TEXT,
    retry_count INTEGER DEFAULT 0,
    
    -- Timing information
    signal_timestamp TIMESTAMPTZ NOT NULL,          -- When signal was generated
    order_created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    order_submitted_at TIMESTAMPTZ,                 -- When submitted to exchange
    first_fill_at TIMESTAMPTZ,                      -- Time of first fill
    last_fill_at TIMESTAMPTZ,                       -- Time of last fill
    completed_at TIMESTAMPTZ,                       -- When order fully completed/cancelled
    
    -- Audit trail
    created_by VARCHAR(255) DEFAULT 'system',
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Order fills table - tracks individual fill events
CREATE TABLE strategy_order_fills (
    id UUID DEFAULT uuid_generate_v4(),
    order_id UUID NOT NULL, -- References strategy_orders(id) but no FK constraint due to partitioning
    
    -- Fill details
    fill_id VARCHAR(255) NOT NULL,                  -- Exchange-specific fill ID
    trade_id VARCHAR(255),                          -- Exchange trade ID
    
    quantity NUMERIC(20, 8) NOT NULL,               -- Fill quantity
    price NUMERIC(20, 8) NOT NULL,                  -- Fill price
    fees NUMERIC(20, 8) DEFAULT 0,                  -- Fees for this fill
    fee_currency VARCHAR(10),                       -- Currency of fees
    
    -- Market data at fill
    bid_price NUMERIC(20, 8),                       -- Best bid at fill time
    ask_price NUMERIC(20, 8),                       -- Best ask at fill time
    mid_price NUMERIC(20, 8),                       -- Mid price at fill time
    spread_bps INTEGER,                             -- Spread in basis points
    
    -- Liquidity information
    is_maker BOOLEAN,                               -- Whether this fill was as maker
    liquidity_flag VARCHAR(10),                    -- Exchange liquidity flag
    
    -- Timing
    fill_timestamp TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Order state changes table - full audit trail
CREATE TABLE strategy_order_state_changes (
    id UUID DEFAULT uuid_generate_v4(),
    order_id UUID NOT NULL, -- References strategy_orders(id) but no FK constraint due to partitioning
    
    -- State change details
    previous_status order_status,
    new_status order_status NOT NULL,
    previous_quantity NUMERIC(20, 8),
    new_quantity NUMERIC(20, 8),
    
    -- Change context
    change_reason VARCHAR(255),                     -- Why the change occurred
    triggered_by VARCHAR(100),                      -- What triggered the change
    exchange_message TEXT,                          -- Exchange response/message
    
    -- Additional data
    state_data JSONB,                              -- Additional state information
    
    -- Timing
    changed_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    
    -- Audit
    changed_by VARCHAR(255) DEFAULT 'system'
);

-- Performance analytics view
CREATE VIEW strategy_order_performance AS
SELECT 
    so.id,
    so.strategy_name,
    so.strategy_instance_id,
    so.symbol,
    so.exchange,
    so.side,
    so.order_type,
    so.original_quantity,
    so.filled_quantity,
    so.avg_fill_price,
    so.price as limit_price,
    so.status,
    so.fees_paid,
    so.slippage_bps,
    so.implementation_shortfall_bps,
    so.market_impact_bps,
    
    -- Timing metrics
    EXTRACT(EPOCH FROM (so.order_submitted_at - so.order_created_at)) * 1000 as submission_latency_ms,
    EXTRACT(EPOCH FROM (so.first_fill_at - so.order_submitted_at)) * 1000 as first_fill_latency_ms,
    EXTRACT(EPOCH FROM (so.completed_at - so.order_created_at)) * 1000 as total_execution_time_ms,
    
    -- Fill statistics
    COUNT(sof.id) as fill_count,
    MIN(sof.price) as min_fill_price,
    MAX(sof.price) as max_fill_price,
    STDDEV(sof.price) as fill_price_stddev,
    
    -- Dates
    so.signal_timestamp,
    so.order_created_at,
    so.completed_at
    
FROM strategy_orders so
LEFT JOIN strategy_order_fills sof ON so.id = sof.order_id
GROUP BY so.id, so.strategy_name, so.strategy_instance_id, so.symbol, so.exchange, so.side, 
         so.order_type, so.original_quantity, so.filled_quantity, so.avg_fill_price, so.price, 
         so.status, so.fees_paid, so.slippage_bps, so.implementation_shortfall_bps, 
         so.market_impact_bps, so.order_submitted_at, so.order_created_at, so.first_fill_at, 
         so.completed_at, so.signal_timestamp;

-- Create TimescaleDB hypertable for high-performance time-series operations
SELECT create_hypertable('strategy_orders', 'order_created_at', chunk_time_interval => interval '1 day');
SELECT create_hypertable('strategy_order_fills', 'fill_timestamp', chunk_time_interval => interval '1 hour');
SELECT create_hypertable('strategy_order_state_changes', 'changed_at', chunk_time_interval => interval '1 hour');

-- Add primary keys after hypertable creation (must include partitioning column)
ALTER TABLE strategy_orders ADD CONSTRAINT strategy_orders_pkey PRIMARY KEY (id, order_created_at);
ALTER TABLE strategy_order_fills ADD CONSTRAINT strategy_order_fills_pkey PRIMARY KEY (id, fill_timestamp);
ALTER TABLE strategy_order_state_changes ADD CONSTRAINT strategy_order_state_changes_pkey PRIMARY KEY (id, changed_at);

-- Compression and retention policies
ALTER TABLE strategy_orders SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'strategy_name, symbol, exchange, status',
    timescaledb.compress_orderby = 'order_created_at DESC'
);

ALTER TABLE strategy_order_fills SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'order_id',
    timescaledb.compress_orderby = 'fill_timestamp DESC'
);

ALTER TABLE strategy_order_state_changes SET (
    timescaledb.compress,
    timescaledb.compress_segmentby = 'order_id',
    timescaledb.compress_orderby = 'changed_at DESC'
);

SELECT add_compression_policy('strategy_orders', INTERVAL '7 days');
SELECT add_compression_policy('strategy_order_fills', INTERVAL '1 day');
SELECT add_compression_policy('strategy_order_state_changes', INTERVAL '1 day');

-- Retention policies (keep data for compliance)
SELECT add_retention_policy('strategy_orders', INTERVAL '7 years');
SELECT add_retention_policy('strategy_order_fills', INTERVAL '7 years');
SELECT add_retention_policy('strategy_order_state_changes', INTERVAL '2 years');

-- Performance indexes
CREATE INDEX idx_strategy_orders_signal_id ON strategy_orders (signal_id);
CREATE INDEX idx_strategy_orders_strategy_instance ON strategy_orders (strategy_instance_id);
CREATE INDEX idx_strategy_orders_symbol_exchange ON strategy_orders (symbol, exchange);
CREATE INDEX idx_strategy_orders_status ON strategy_orders (status);
CREATE INDEX idx_strategy_orders_strategy_name ON strategy_orders (strategy_name);
CREATE INDEX idx_strategy_orders_created_at ON strategy_orders (order_created_at);
CREATE INDEX idx_strategy_orders_completed_at ON strategy_orders (completed_at);

-- Child order relationship index
CREATE INDEX idx_strategy_orders_parent ON strategy_orders (parent_order_id) WHERE parent_order_id IS NOT NULL;

-- Order fills indexes
CREATE INDEX idx_order_fills_order_id ON strategy_order_fills (order_id);
CREATE INDEX idx_order_fills_timestamp ON strategy_order_fills (fill_timestamp);
CREATE INDEX idx_order_fills_price ON strategy_order_fills (price);

-- State changes indexes  
CREATE INDEX idx_order_state_changes_order_id ON strategy_order_state_changes (order_id);
CREATE INDEX idx_order_state_changes_timestamp ON strategy_order_state_changes (changed_at);
CREATE INDEX idx_order_state_changes_status ON strategy_order_state_changes (new_status);

-- Composite indexes for common queries
CREATE INDEX idx_strategy_orders_performance ON strategy_orders (strategy_name, status, order_created_at);
CREATE INDEX idx_strategy_orders_active ON strategy_orders (status, order_created_at) 
    WHERE status IN ('pending', 'submitted', 'partially_filled');

-- Unique constraints (must include partitioning columns for hypertables)
CREATE UNIQUE INDEX idx_strategy_orders_unique_id ON strategy_orders (unique_id, order_created_at);
CREATE UNIQUE INDEX idx_order_fills_unique ON strategy_order_fills (order_id, fill_id, fill_timestamp);
