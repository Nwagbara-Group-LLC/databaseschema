name: Database Schema CI/CD

on:
  push:
    branches: [ main, develop, 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  REGISTRY: tradingplatformacr.azurecr.io
  IMAGE_NAME: database-schema
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Database Schema
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
        postgres: [13, 14, 15]
    
    services:
      postgres:
        image: postgres:${{ matrix.postgres }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v1-rust"
        shared-key: "database-schema"
        
    - name: Install Diesel CLI
      run: |
        cargo install diesel_cli --no-default-features --features postgres
        
    - name: Check formatting
      run: cargo fmt -- --check
      
    - name: Run Clippy
      run: cargo clippy --all-targets -- -D warnings
      
    - name: Build project
      run: cargo build --verbose
      
    - name: Setup test database
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/trading_platform_test
      run: |
        diesel setup
        diesel migration run
        
    - name: Run schema tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/trading_platform_test
      run: cargo test --verbose
      
    - name: Test migration rollback
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/trading_platform_test
      run: |
        diesel migration redo --all
        
    - name: Validate schema integrity
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/trading_platform_test
      run: |
        # Check for foreign key constraints
        psql $DATABASE_URL -c "SELECT conname, conrelid::regclass FROM pg_constraint WHERE contype = 'f';"
        # Check for indexes
        psql $DATABASE_URL -c "SELECT indexname, tablename FROM pg_indexes WHERE schemaname = 'public';"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies  
      uses: Swatinem/rust-cache@v2
      
    - name: Run security audit
      run: |
        cargo install cargo-audit
        cargo audit
        
    - name: Check SQL injection patterns
      run: |
        # Check migrations for potential SQL injection patterns
        if grep -r "format!\|format_args!\|\$\{" migrations/; then
          echo "Potential SQL injection vulnerability found in migrations"
          exit 1
        fi

  build-migrations:
    name: Build Migration Container
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push migration image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: migrations

  migrate-dev:
    name: Migrate Development Database
    runs-on: ubuntu-latest
    needs: build-migrations
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'
    environment:
      name: development
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.AZURE_RG_DEV }} --name ${{ secrets.AKS_CLUSTER_DEV }}
        
    - name: Run database migrations
      run: |
        kubectl create job --from=cronjob/database-migration-dev migration-$(date +%s) \
          --namespace trading-platform-dev \
          --dry-run=client -o yaml | \
        kubectl apply -f -
        
    - name: Wait for migration completion
      run: |
        kubectl wait --for=condition=complete job -l job-name=migration --timeout=300s \
          --namespace trading-platform-dev

  migrate-staging:
    name: Migrate Staging Database
    runs-on: ubuntu-latest
    needs: [build-migrations, migrate-dev]
    if: startsWith(github.ref, 'refs/heads/release/') || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.AZURE_RG_STAGING }} --name ${{ secrets.AKS_CLUSTER_STAGING }}
        
    - name: Backup database before migration
      run: |
        kubectl create job database-backup-$(date +%s) \
          --image=${{ env.REGISTRY }}/database-backup:latest \
          --namespace trading-platform-staging \
          --dry-run=client -o yaml | \
        kubectl apply -f -
        
    - name: Run database migrations
      run: |
        kubectl create job --from=cronjob/database-migration-staging migration-$(date +%s) \
          --namespace trading-platform-staging \
          --dry-run=client -o yaml | \
        kubectl apply -f -
        
    - name: Validate migration
      run: |
        kubectl wait --for=condition=complete job -l job-name=migration --timeout=600s \
          --namespace trading-platform-staging

  migrate-prod:
    name: Migrate Production Database
    runs-on: ubuntu-latest
    needs: [build-migrations, migrate-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    environment:
      name: production
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.AZURE_RG_PROD }} --name ${{ secrets.AKS_CLUSTER_PROD }}
        
    - name: Create production backup
      run: |
        kubectl create job database-backup-prod-$(date +%s) \
          --image=${{ env.REGISTRY }}/database-backup:latest \
          --namespace trading-platform \
          --dry-run=client -o yaml | \
        kubectl apply -f -
        
    - name: Manual approval checkpoint
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: platform-admins
        minimum-approvals: 2
        issue-title: "Production Database Migration Approval"
        issue-body: |
          Please review and approve the production database migration.
          
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Author: ${{ github.actor }}
          
          Migration will be applied to production database.
        
    - name: Run production database migrations
      run: |
        kubectl create job --from=cronjob/database-migration-prod migration-$(date +%s) \
          --namespace trading-platform \
          --dry-run=client -o yaml | \
        kubectl apply -f -
        
    - name: Validate production migration
      run: |
        kubectl wait --for=condition=complete job -l job-name=migration --timeout=900s \
          --namespace trading-platform
        
    - name: Post-migration validation
      run: |
        kubectl run db-validation --rm -i --restart=Never \
          --image=${{ env.REGISTRY }}/database-schema:${{ github.sha }} \
          --namespace=trading-platform \
          -- /usr/local/bin/validate-schema

  notification:
    name: Notify Migration Status
    runs-on: ubuntu-latest
    needs: [migrate-dev, migrate-staging, migrate-prod]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#database'
        text: |
          Database migration completed
          Environment: ${{ github.event.inputs.environment || 'auto' }}
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Schema Version: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
